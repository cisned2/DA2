
DA2_Task5_c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000785  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000687  00000000  00000000  00000961  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029e  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00001288  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bd  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012c  00000000  00000000  00001695  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000017c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 4a 00 	jmp	0x94	; 0x94 <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:



int main(void)
{
	DDRB = 4; //set PORTB2 as output for LED
  80:	84 e0       	ldi	r24, 0x04	; 4
  82:	84 b9       	out	0x04, r24	; 4
	DDRD &= ~(1 << PIND2); //set PORTD2 as input for pushbutton switch
  84:	52 98       	cbi	0x0a, 2	; 10
	EIMSK = (1 << INT0); //enable INT0 interrupt
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	8d bb       	out	0x1d, r24	; 29
	EICRA = 3; //enable INT0 flag on rising edge
  8a:	83 e0       	ldi	r24, 0x03	; 3
  8c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	sei(); //enable global interrupt
  90:	78 94       	sei
  92:	ff cf       	rjmp	.-2      	; 0x92 <main+0x12>

00000094 <__vector_1>:
    while (1) 
    {
	}
}

ISR(INT0_vect){
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	2f 93       	push	r18
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	81 ee       	ldi	r24, 0xE1	; 225
  a6:	94 e0       	ldi	r25, 0x04	; 4
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <__vector_1+0x14>
  ac:	00 c0       	rjmp	.+0      	; 0xae <__vector_1+0x1a>
  ae:	00 00       	nop
	_delay_ms(5); //debounce
	if (PIND & 0x04){
  b0:	4a 9b       	sbis	0x09, 2	; 9
  b2:	14 c0       	rjmp	.+40     	; 0xdc <__vector_1+0x48>
  b4:	9f e3       	ldi	r25, 0x3F	; 63
  b6:	2d e0       	ldi	r18, 0x0D	; 13
  b8:	83 e0       	ldi	r24, 0x03	; 3
  ba:	91 50       	subi	r25, 0x01	; 1
  bc:	20 40       	sbci	r18, 0x00	; 0
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <__vector_1+0x26>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <__vector_1+0x30>
  c4:	00 00       	nop
	_delay_ms(1000); //initial 1s delay after pressing button
	PORTB |= (1 << PINB2); //turn on LED connected to PINB2 for 2s
  c6:	2a 9a       	sbi	0x05, 2	; 5
  c8:	9f e7       	ldi	r25, 0x7F	; 127
  ca:	2a e1       	ldi	r18, 0x1A	; 26
  cc:	86 e0       	ldi	r24, 0x06	; 6
  ce:	91 50       	subi	r25, 0x01	; 1
  d0:	20 40       	sbci	r18, 0x00	; 0
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <__vector_1+0x3a>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <__vector_1+0x44>
  d8:	00 00       	nop
	_delay_ms(2000); //delay on mode for 2s
	PORTB &= ~(1 << PINB2); //turn off LED
  da:	2a 98       	cbi	0x05, 2	; 5
	}
  dc:	9f 91       	pop	r25
  de:	8f 91       	pop	r24
  e0:	2f 91       	pop	r18
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
